First to get the buggy coreutils section, untar, make a working directory
configure, make and make install:

wget http://web.cs.ucla.edu/classes/spring19/cs35L/assign/coreutils-with-bug.tar.gz
tar -xvzf coreutils-with-bug.tar.gz
mkdir coreLab4
cd coreutils-with-bug
./configure --prefix=/u/eng/class/classlgr/coreLab4
make

- At this point, I get an error for a repetitive name...

Building this way failed at a couple of lines, so I patched the fix file
with these commands after copying the patch webpage and did make and
make install:

cd coreutils-with-bug
emacs patch2.diff (then copied the file in)
patch -p0 < patch2.diff
make
make install

Now to test the bug:

tmp=$(mktemp -d)
cd $tmp
touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
touch now
sleep 1
touch now1
~coreLab4/bin/ls -lt --full-time wwi-armistice-cs35L now now1

- this returns the output(with the time out of order):

-rw-r--r-- 1 classlgr class 0 1918-11-11 03:00:00.000000000 -0800 wwi-armistice
-rw-r--r-- 1 classlgr class 0 2019-04-28 01:11:15.667804782 -0700 now1
-rw-r--r-- 1 classlgr class 0 2019-04-28 01:11:07.564580218 -0700 now

To debug this problem, I first entered my temporary directory with the
problematic ls command and entered the debugger:

cd ~/coreLab4/bin
gdb ./ls

Then I analyzed the error: the outputs were out of order and they were
sorted based on time, so there must've been something wrong with the
timestamp comparison mechanism within the command. I then looked through
all the functions within the command using the info functions command in
the debugger. I saw six functions with the word time in them:
compare_atime compare_ctime compare_mtime compstr_atime compstr_ctime compstr_mtime
Using the list command, I analyzed each of these functions and saw they
all had the same comparison named timespec_cmp:

info functions
list compare_atime compare_ctime compare_mtime compstr_atime compstr_ctime compstr_mtime
list timespec_cmp

- output:

timespec_cmp (struct timespec a, struct timespec b)
      {
        int diff = a.tv_sec - b.tv_sec;
        return diff ? diff : a.tv_nsec - b.tv_nsec;
      }

This problem could be the problem with the original ls command, because
given numbers too big, the difference could overflow and/or wrap around
giving an incorrect result. The difference would definitely overflow
with massive nanosecond numbers from 1918, where it would wrap around
to a time in the future.

To inspect this function further, I set a break point at compare_mtime,
stepped in and it told me that the file was located in ../lib/timespec.h:

break compare_time
run -lt
stepi

At this point, I quit the debugger and went to find the file in the
coreutils-with-bug, where I copied it to another file, correced the new file, and
ran a diff command on the two files, and put the output in a file called lab4.diff.
The change that I decided to make was removing the subtraction, which caused
errors and simply used comparisons between the two numbers:

(gdb) q
cd coreutils-with-bug
cp lib/timespec.h timespec.h

(Make changes in timespec.h so that the function looks like this now):

static inline int
timespec_cmp (struct timespec a, struct timespec b)
{
  if(a.tv_sec < b.tv_sec)
    return -1;
  else if(a.tv_sce == b.tv_sec)
    return 0;
  else
    return 1;
}

diff -u lib/timespec.h timespec.h > lab4.diff


At this point, lab4.diff contained my new changes, so I entered the emacs file
and added a change log, describing what I'd done

emacs lab4.diff
C-x 4 a
C-x C-s
C-x C-c


The last thing was to run the ls program on the SEASnet machine:

cd
touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
touch now
sleep 1
touch now1
TZ=UTC0 ls -lt --full-time wwi-armistice-cs35L now now1

output:

-rw-r--r-- 1 classlgr class 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice-cs35L
-rw-r--r-- 1 classlgr class 0 2019-04-28 10:26:23.490676000 +0000 now1
-rw-r--r-- 1 classlgr class 0 2019-04-28 10:26:18.221119000 +0000 now


Using the ls command in this scenario on the SEASnet machines also outputs the
incorrect list, saying the armistice was in 2054. Because SEASnet uses
unsigned 32-bit timestamps (not considering negatives) this massive date in the
past, actually ends up being in the future.
