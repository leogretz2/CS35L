1. First I wrote the tr2b.c file which takes in buffered input
and translates specific characters. This includes checks to see
if the number of arguments was right, the length of the arguments
were the same and the 'from' word contains duplicates. If none
of these errors are cuased, the program translates the common
letters in 'from' and stdin into the corresponding letters in 'to.'
This program uses getchar and putchar to interact with stdin and
stdout.

2. Next I wrote the tr2u.c file which deals with unbuffered input
basically by using read and write insteda of getchar and putchar.

3. Now we have to test these commands on a large 5 million byte
file, which I created using:

head --bytes=5000000 /dev/urandom > largefile.txt

Now to test it using strace (with the c option), for the buffered
program I used:

strace -c ./tr2b ‘AB’ ‘XY’ < largefile.txt > tr2boutp

which returned 1247 system calls.

and for the unbuffered program I used:

strace -c ./tr2u ‘AB’ ‘XY’ < largefile.txt > tr2uoutp

This returned 1000024 system calls because unbuffered requires
more calls to read and write.

To copy it onto the terminal:

strace -c ./tr2b ‘AB’ ‘XY’ < largefile.txt

Which returned 20516 system calls, and:

strace -c ./tr2u ‘AB’ ‘XY’ < largefile.txt

Which returned system 10000024 calls. Again, tr2u requires more system
calls.


4. To test the speed of each program I used:

time ./tr2b 'AB' 'XY' < largefile.txt > tr2bout2

output:

real    0m0.311s
user    0m0.235s
sys     0m0.005s

time ./tr2u 'AB' 'XY' < largefile.txt > tr2uout2

output:

real    0m10.699s
user    0m1.291s
sys     0m9.333s

tr2b is much faster.

To test it when copying into the terminal:

time ./tr2b 'AB' 'XY' < largefile.txt > tr2bo

output:

real   0m6.346s
user   0m0.315s
sys    0m0.069s


time ./tr2u 'AB' 'XY' < largefile.txt

output:

real   0m10.706s
user   0m1.394s
sys    0m8.385s

tr2b is faster again - read and write calls are much
more frequent when using unbuffered I/O.
